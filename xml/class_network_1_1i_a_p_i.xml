<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="class_network_1_1i_a_p_i" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Network::iAPI</compoundname>
    <derivedcompoundref refid="class_server_1_1_server" prot="public" virt="non-virtual">Server::Server</derivedcompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1aed9a0f5ce10bbeb1351c0633f5782701" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::messageClient</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; clientConnection, const Message &amp;message) const =0</argsstring>
        <name>messageClient</name>
        <qualifiedname>Network::iAPI::messageClient</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>clientConnection</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Method for sending the message from client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_network_1_1_connection" kindref="compound">Connection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>management class as std::shared_ptr&lt;Network::Connection&gt;&amp; and <ref refid="struct_network_1_1_message" kindref="compound">Network::Message</ref>&amp; class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="39" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a4b5007b4816dc33164fa98805de71419" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::messageAllClients</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; exceptionConnection, const Message &amp;message) const =0</argsstring>
        <name>messageAllClients</name>
        <qualifiedname>Network::iAPI::messageAllClients</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>exceptionConnection</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Method of sending a message to all clients. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Network::Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>class and connection management class as std::shared_ptr&lt;Network::Connection&gt;&amp;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="45" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1af24582a286af71a8eacba36726398367" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::checkServerPing</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>checkServerPing</name>
        <qualifiedname>Network::iAPI::checkServerPing</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking of server ping. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="52" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1ad9eff1dc9c7857819c62a2074eeb48ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::readAllMessage</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>readAllMessage</name>
        <qualifiedname>Network::iAPI::readAllMessage</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking of receiving all messages by the client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="59" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a21e463443cf817b027ba4942d60aaf14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::channelListRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client) const =0</argsstring>
        <name>channelListRequest</name>
        <qualifiedname>Network::iAPI::channelListRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>The method of checking for a channel list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="65" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a93d6a170b5d4653cb1e9779f6bfa8072" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::messageHistoryRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>messageHistoryRequest</name>
        <qualifiedname>Network::iAPI::messageHistoryRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking message history extraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="72" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a76678ec2632fd05ee1c06aaa0935c55d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::messageStoreRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>messageStoreRequest</name>
        <qualifiedname>Network::iAPI::messageStoreRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking the retrieval of stored messages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="79" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a1a24cd0912abfec16da5f3c346cacebc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::replyHistoryRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>replyHistoryRequest</name>
        <qualifiedname>Network::iAPI::replyHistoryRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking answer history extraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="86" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a22de7cc4357c7aae81e52e1500dc7336" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::replyStoreRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>replyStoreRequest</name>
        <qualifiedname>Network::iAPI::replyStoreRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking repeatedly the retrieval of stored messages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="93" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a297367a02c0325f7fd5f0c51a2e964c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::messageDeleteRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>messageDeleteRequest</name>
        <qualifiedname>Network::iAPI::messageDeleteRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking of deletion a message request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="100" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1adbfe8578fa2f9fa1c974bbf4c327e05a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::messageEditRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>messageEditRequest</name>
        <qualifiedname>Network::iAPI::messageEditRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking the editing of a query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="107" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a15356321c5f03368adbdb31206cc64e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::messageReactionRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>messageReactionRequest</name>
        <qualifiedname>Network::iAPI::messageReactionRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking the reaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="114" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1aa7482114ef4ff6eab5e1fc68d35aad23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::registrationRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>registrationRequest</name>
        <qualifiedname>Network::iAPI::registrationRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking the registration request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="121" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1ad011402f5be6dc6e70d12aed8b77c607" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::loginRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>loginRequest</name>
        <qualifiedname>Network::iAPI::loginRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking the logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="128" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1abb05009a87b33e03b4b3a181605b1700" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::channelLeaveRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>channelLeaveRequest</name>
        <qualifiedname>Network::iAPI::channelLeaveRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking the exit from the channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="135" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1ab1620a7f8e1490daa129e1dca4135f1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::channelSubscribeRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>channelSubscribeRequest</name>
        <qualifiedname>Network::iAPI::channelSubscribeRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for verifying a channel subscription. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="142" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a323705e801970f8c03d694bb909497d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::channelSubscriptionListRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client) const =0</argsstring>
        <name>channelSubscriptionListRequest</name>
        <qualifiedname>Network::iAPI::channelSubscriptionListRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>The method for checking the verification of users subscribed to a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="148" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a33380e32ebd7d85a307bc8b26b2c28b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::channelDeleteRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>channelDeleteRequest</name>
        <qualifiedname>Network::iAPI::channelDeleteRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method of checking the deletion of a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="155" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a09661ee066bdf7b8fea61cc85454d387" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::channelCreateRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>channelCreateRequest</name>
        <qualifiedname>Network::iAPI::channelCreateRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method of checking the creation of a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="162" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1afff45903aef7e97569f21deb6ae7c834" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::directMessageCreateRequest</definition>
        <argsstring>(std::shared_ptr&lt; Connection &gt; client, const Message &amp;message) const =0</argsstring>
        <name>directMessageCreateRequest</name>
        <qualifiedname>Network::iAPI::directMessageCreateRequest</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_network_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const <ref refid="struct_network_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>The method for checking direct messages received by the user. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr&lt;Connection&gt;&amp; client - for connect messages to the client or server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Message&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>message - for use the message header functionality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="169" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1a3d56453db22b55a0b366a6ee636ca7d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::optional&lt; MessageResult &gt;</type>
        <definition>virtual std::optional&lt; MessageResult &gt; Network::iAPI::defaultRequest</definition>
        <argsstring>() const =0</argsstring>
        <name>defaultRequest</name>
        <qualifiedname>Network::iAPI::defaultRequest</qualifiedname>
        <briefdescription>
<para>The method for getting default request. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="174" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_network_1_1i_a_p_i_1ad6d45dc8df289d3fd7479f9990291d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Network::iAPI::~iAPI</definition>
        <argsstring>()=default</argsstring>
        <name>~iAPI</name>
        <qualifiedname>Network::iAPI::~iAPI</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Network/Public/Include/Network/iAPI.hpp" line="176" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Network::iAPI</label>
        <link refid="class_network_1_1i_a_p_i"/>
      </node>
      <node id="2">
        <label>Server::Server</label>
        <link refid="class_server_1_1_server"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="Network/Public/Include/Network/iAPI.hpp" line="32" column="5" bodyfile="Network/Public/Include/Network/iAPI.hpp" bodystart="33" bodyend="177"/>
    <listofallmembers>
      <member refid="class_network_1_1i_a_p_i_1a09661ee066bdf7b8fea61cc85454d387" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>channelCreateRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1a33380e32ebd7d85a307bc8b26b2c28b6" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>channelDeleteRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1abb05009a87b33e03b4b3a181605b1700" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>channelLeaveRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1a21e463443cf817b027ba4942d60aaf14" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>channelListRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1ab1620a7f8e1490daa129e1dca4135f1b" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>channelSubscribeRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1a323705e801970f8c03d694bb909497d3" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>channelSubscriptionListRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1af24582a286af71a8eacba36726398367" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>checkServerPing</name></member>
      <member refid="class_network_1_1i_a_p_i_1a3d56453db22b55a0b366a6ee636ca7d0" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>defaultRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1afff45903aef7e97569f21deb6ae7c834" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>directMessageCreateRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1ad011402f5be6dc6e70d12aed8b77c607" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>loginRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1a4b5007b4816dc33164fa98805de71419" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>messageAllClients</name></member>
      <member refid="class_network_1_1i_a_p_i_1aed9a0f5ce10bbeb1351c0633f5782701" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>messageClient</name></member>
      <member refid="class_network_1_1i_a_p_i_1a297367a02c0325f7fd5f0c51a2e964c7" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>messageDeleteRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1adbfe8578fa2f9fa1c974bbf4c327e05a" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>messageEditRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1a93d6a170b5d4653cb1e9779f6bfa8072" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>messageHistoryRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1a15356321c5f03368adbdb31206cc64e9" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>messageReactionRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1a76678ec2632fd05ee1c06aaa0935c55d" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>messageStoreRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1ad9eff1dc9c7857819c62a2074eeb48ea" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>readAllMessage</name></member>
      <member refid="class_network_1_1i_a_p_i_1aa7482114ef4ff6eab5e1fc68d35aad23" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>registrationRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1a1a24cd0912abfec16da5f3c346cacebc" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>replyHistoryRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1a22de7cc4357c7aae81e52e1500dc7336" prot="public" virt="pure-virtual"><scope>Network::iAPI</scope><name>replyStoreRequest</name></member>
      <member refid="class_network_1_1i_a_p_i_1ad6d45dc8df289d3fd7479f9990291d2b" prot="public" virt="virtual"><scope>Network::iAPI</scope><name>~iAPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
