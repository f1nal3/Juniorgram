<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="class_base_1_1_logger_1_1_file_logger" kind="class" language="C++" prot="public">
    <compoundname>Base::Logger::FileLogger</compoundname>
    <basecompoundref refid="class_base_1_1_logger_1_1_i_logger" prot="private" virt="non-virtual">Base::Logger::ILogger</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_base_1_1_logger_1_1_file_logger_1a4218db7fbf85c084939403a78fa4cf0b" prot="public" static="no">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>using Base::Logger::FileLogger::BlockWrapper =  std::pair&lt;std::string, std::string&gt;</definition>
        <argsstring></argsstring>
        <name>BlockWrapper</name>
        <qualifiedname>Base::Logger::FileLogger::BlockWrapper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="22" column="5" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1a48782f4544a8209504e3ee3d2fdce548" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Base::Logger::FileLogger::_fileNamePrefix</definition>
        <argsstring></argsstring>
        <name>_fileNamePrefix</name>
        <qualifiedname>Base::Logger::FileLogger::_fileNamePrefix</qualifiedname>
        <initializer>{&quot;Log-&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="172" column="18" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1af44161661446460008728f7fec1cec83" prot="private" static="no" mutable="no">
        <type>LogOutput</type>
        <definition>LogOutput Base::Logger::FileLogger::_output</definition>
        <argsstring></argsstring>
        <name>_output</name>
        <qualifiedname>Base::Logger::FileLogger::_output</qualifiedname>
        <initializer>= LogOutput::EVERYWHERE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="173" column="18" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1ab97c0714576b98ad45483fa36888d0d1" prot="private" static="no" mutable="no">
        <type>std::fstream</type>
        <definition>std::fstream Base::Logger::FileLogger::_file</definition>
        <argsstring></argsstring>
        <name>_file</name>
        <qualifiedname>Base::Logger::FileLogger::_file</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="174" column="18" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1a7c47def00c90db1987917e42a0860c05" prot="private" static="no" mutable="no">
        <type>BlockWrapper</type>
        <definition>BlockWrapper Base::Logger::FileLogger::_blockWrapper</definition>
        <argsstring></argsstring>
        <name>_blockWrapper</name>
        <qualifiedname>Base::Logger::FileLogger::_blockWrapper</qualifiedname>
        <initializer>= {&quot;[&quot;, &quot;]&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="176" column="18" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1a268fdefcc43f6c2003d517284da5b99d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Base::Logger::FileLogger::_isOpened</definition>
        <argsstring></argsstring>
        <name>_isOpened</name>
        <qualifiedname>Base::Logger::FileLogger::_isOpened</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="178" column="10" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1a78cb4558a0c90301879283cacb1d3fa7" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread Base::Logger::FileLogger::_loggerThread</definition>
        <argsstring></argsstring>
        <name>_loggerThread</name>
        <qualifiedname>Base::Logger::FileLogger::_loggerThread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="180" column="42" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1ad0e12fc59659878c779e2cfa0618a2d8" prot="private" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable Base::Logger::FileLogger::_inputWait</definition>
        <argsstring></argsstring>
        <name>_inputWait</name>
        <qualifiedname>Base::Logger::FileLogger::_inputWait</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="181" column="42" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1adc414f089e7397fc35069b7d8f756ef6" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex Base::Logger::FileLogger::_mutex</definition>
        <argsstring></argsstring>
        <name>_mutex</name>
        <qualifiedname>Base::Logger::FileLogger::_mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="182" column="42" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1a463aa90bc106802183aa671d025d60e2" prot="private" static="no" mutable="no">
        <type><ref refid="class_utility_1_1_safe_queue" kindref="compound">Utility::SafeQueue</ref>&lt; std::string &gt;</type>
        <definition>Utility::SafeQueue&lt;std::string&gt; Base::Logger::FileLogger::_msgQueue</definition>
        <argsstring></argsstring>
        <name>_msgQueue</name>
        <qualifiedname>Base::Logger::FileLogger::_msgQueue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="183" column="29" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_base_1_1_logger_1_1_file_logger_1aa4d4180025e2f0475924160466ba1558" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Base::Logger::FileLogger::_stop</definition>
        <argsstring></argsstring>
        <name>_stop</name>
        <qualifiedname>Base::Logger::FileLogger::_stop</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="184" column="42" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a027d30e79c1fca75712cb038374dbd94" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_1_1_logger_1_1_file_logger" kindref="compound">FileLogger</ref> &amp;</type>
        <definition>static FileLogger &amp; Base::Logger::FileLogger::getInstance</definition>
        <argsstring>()</argsstring>
        <name>getInstance</name>
        <qualifiedname>Base::Logger::FileLogger::getInstance</qualifiedname>
        <briefdescription>
<para>Gets an object of the current class. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>object Logger </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="28" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a1cc1b989023255d98f6c8d6ae4a09ad5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string Base::Logger::FileLogger::stringifyLogLvl</definition>
        <argsstring>(LogLevel level)</argsstring>
        <name>stringifyLogLvl</name>
        <qualifiedname>Base::Logger::FileLogger::stringifyLogLvl</qualifiedname>
        <param>
          <type>LogLevel</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Stringify the log level to its name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>LogLevel - element of LogLevel enumeration that should be stringify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="41" column="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a22c42988710aca29d8b9cc195175dd92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::init</definition>
        <argsstring>(const std::string &amp;filename, LogOutput output)</argsstring>
        <name>init</name>
        <qualifiedname>Base::Logger::FileLogger::init</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>LogOutput</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Initialization of the current class object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>std::string name to write data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>LogOutput - the place where the data will be displayed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="35" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a14f120266747db9a061678430601b4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::log</definition>
        <argsstring>(const std::string &amp;msg, LogLevel severity=LogLevel::DEBUG) override</argsstring>
        <name>log</name>
        <qualifiedname>Base::Logger::FileLogger::log</qualifiedname>
        <reimplements refid="class_base_1_1_logger_1_1_i_logger_1aceca593feab614fdffe67cd196198f99">log</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>LogLevel</type>
          <declname>severity</declname>
          <defval>LogLevel::DEBUG</defval>
        </param>
        <briefdescription>
<para>Log entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>std::string - message that should be written at log </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>LogLevel - level of message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="48" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a65e23d4546f3918ae346cace6552212c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Base::Logger::FileLogger::log</definition>
        <argsstring>(const T &amp;t, const LogLevel level=LogLevel::DEBUG)</argsstring>
        <name>log</name>
        <qualifiedname>Base::Logger::FileLogger::log</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const LogLevel</type>
          <declname>level</declname>
          <defval>LogLevel::DEBUG</defval>
        </param>
        <briefdescription>
<para>Log entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>T&amp; - templated type of log message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>LogLevel - level of message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="56" column="10" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1af2bef7677032ede7b1af130b32e70883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Base::Logger::FileLogger::FileLogger</definition>
        <argsstring>(const FileLogger &amp;)=delete</argsstring>
        <name>FileLogger</name>
        <qualifiedname>Base::Logger::FileLogger::FileLogger</qualifiedname>
        <param>
          <type>const <ref refid="class_base_1_1_logger_1_1_file_logger" kindref="compound">FileLogger</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Deleted copy constructor in singleton pattern purpose. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="66" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a26f5b1389cee9b5b10b8f09f2121d0fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_1_1_logger_1_1_file_logger" kindref="compound">FileLogger</ref> &amp;</type>
        <definition>FileLogger &amp; Base::Logger::FileLogger::operator=</definition>
        <argsstring>(const FileLogger &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>Base::Logger::FileLogger::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_base_1_1_logger_1_1_file_logger" kindref="compound">FileLogger</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Deleted assigning operator in singleton pattern purpose. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="71" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a8680624cb2a594bf724e44846d0c5465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::error</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>error</name>
        <qualifiedname>Base::Logger::FileLogger::error</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Method used to say that&apos;s going to be an error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::string&amp; -&gt; incoming message, that should describe situation or progress </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="77" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1aa664e10474f1b49e2388e1eb07a0c755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::warning</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>warning</name>
        <qualifiedname>Base::Logger::FileLogger::warning</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Method used to say that&apos;s going to be a possible error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::string&amp; -&gt; incoming message, that should describe situation or progress </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="83" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a61a86e28c6c9e1017f6b04393df5fcaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::info</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>info</name>
        <qualifiedname>Base::Logger::FileLogger::info</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Method used to say general information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::string&amp; -&gt; incoming message, that should describe situation or progress </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="89" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a768d789db9c74012fcbbfecba6bdb02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::debug</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>debug</name>
        <qualifiedname>Base::Logger::FileLogger::debug</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Method used to say general information detailing debug progress. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>std::string&amp; -&gt; incoming message, that should describe situation or progress </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="95" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1aa3344fc843cdce5df2476e426c580be1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_base_of_v&lt; std::exception, T &gt;, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_base_of_v&lt; std::exception, T &gt;, void &gt; Base::Logger::FileLogger::logAndThrow</definition>
        <argsstring>(const char *filename, std::uint16_t line, const T &amp;exception, LogLevel severity=LogLevel::DEBUG)</argsstring>
        <name>logAndThrow</name>
        <qualifiedname>Base::Logger::FileLogger::logAndThrow</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>exception</declname>
        </param>
        <param>
          <type>LogLevel</type>
          <declname>severity</declname>
          <defval>LogLevel::DEBUG</defval>
        </param>
        <briefdescription>
<para>Method used to say some information and to throw an exception. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>char* -&gt; name of file where the event took place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::uint16_t</parametername>
</parameternamelist>
<parameterdescription>
<para>-&gt; line of the file where event took place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>-&gt; std::exception based object to next throw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LogLevel</parametername>
</parameternamelist>
<parameterdescription>
<para>- level of message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="106" column="5" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="106" bodyend="110"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a9f93dc69e1b0e70fd26adb7a118c0c71" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Base::Logger::FileLogger::FileLogger</definition>
        <argsstring>()</argsstring>
        <name>FileLogger</name>
        <qualifiedname>Base::Logger::FileLogger::FileLogger</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="113" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a07cf38e326acb545ce748de4132c58b5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Base::Logger::FileLogger::~FileLogger</definition>
        <argsstring>() override</argsstring>
        <name>~FileLogger</name>
        <qualifiedname>Base::Logger::FileLogger::~FileLogger</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="114" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a811e20feceb2bae48ce1c4cded0559e2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::fileSync</definition>
        <argsstring>() const</argsstring>
        <name>fileSync</name>
        <qualifiedname>Base::Logger::FileLogger::fileSync</qualifiedname>
        <briefdescription>
<para>Syncs the number of log files in the folder. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="119" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1aeb0e33cf890d60e61e4fb2276aef681d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Base::Logger::FileLogger::genDateTimeFileName</definition>
        <argsstring>() const</argsstring>
        <name>genDateTimeFileName</name>
        <qualifiedname>Base::Logger::FileLogger::genDateTimeFileName</qualifiedname>
        <briefdescription>
<para>Get the name of the logger file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>&quot;Log-dd.mm.yy.txt&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="125" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1ad4b46a15dff84da2f76cc53617dcd087" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <qualifiedname>Base::Logger::FileLogger::run</qualifiedname>
        <briefdescription>
<para>Loop to synchronize all threads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="130" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1abd26fca4ab25c4c8f5d8ca90353a5882" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::open</definition>
        <argsstring>()</argsstring>
        <name>open</name>
        <qualifiedname>Base::Logger::FileLogger::open</qualifiedname>
        <briefdescription>
<para>Opening the current class file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="159" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a7abb410460ffa8f18e790496e53d8de7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <qualifiedname>Base::Logger::FileLogger::close</qualifiedname>
        <briefdescription>
<para>Closing the current class file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="164" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a3767a630a7504a4b701121cfabb86428" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Base::Logger::FileLogger::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <qualifiedname>Base::Logger::FileLogger::stop</qualifiedname>
        <briefdescription>
<para>Fun to stop the thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="169" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a743fe2a2861ba3c59f790bd2f0a2e9a3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string Base::Logger::FileLogger::timestamp</definition>
        <argsstring>()</argsstring>
        <name>timestamp</name>
        <qualifiedname>Base::Logger::FileLogger::timestamp</qualifiedname>
        <briefdescription>
<para>Marks to current time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>time format [yyyy.mm.dd. hh.mm.ss.ms] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="136" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1a73569b0f30f60b810cd6cac758c162e8" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string Base::Logger::FileLogger::threadID</definition>
        <argsstring>()</argsstring>
        <name>threadID</name>
        <qualifiedname>Base::Logger::FileLogger::threadID</qualifiedname>
        <briefdescription>
<para>Marks to current thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>curent thread in string format </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="142" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1ac91f2a18964516183f2ead33bb7411cd" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::time_t</type>
        <definition>static std::time_t Base::Logger::FileLogger::to_time_t</definition>
        <argsstring>(std::filesystem::file_time_type timeType)</argsstring>
        <name>to_time_t</name>
        <qualifiedname>Base::Logger::FileLogger::to_time_t</qualifiedname>
        <param>
          <type>std::filesystem::file_time_type</type>
          <declname>timeType</declname>
        </param>
        <briefdescription>
<para>Converts the std::filesystem::last_write_time to time_t. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the time in the format time_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="148" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_base_1_1_logger_1_1_file_logger_1acbe0d20de8f883b71047ecde06580e97" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string Base::Logger::FileLogger::wrapValue</definition>
        <argsstring>(const std::string &amp;value, const BlockWrapper &amp;blockWrapper)</argsstring>
        <name>wrapValue</name>
        <qualifiedname>Base::Logger::FileLogger::wrapValue</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const BlockWrapper &amp;</type>
          <declname>blockWrapper</declname>
        </param>
        <briefdescription>
<para>Wraps the value of a variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[value] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="154" column="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Base::Logger::FileLogger</label>
        <link refid="class_base_1_1_logger_1_1_file_logger"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Base::Logger::ILogger</label>
        <link refid="class_base_1_1_logger_1_1_i_logger"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Base::Logger::FileLogger</label>
        <link refid="class_base_1_1_logger_1_1_file_logger"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Base::Logger::ILogger</label>
        <link refid="class_base_1_1_logger_1_1_i_logger"/>
      </node>
    </collaborationgraph>
    <location file="Base/Logger/Logger.Static/FileLogger.hpp" line="19" column="1" bodyfile="Base/Logger/Logger.Static/FileLogger.hpp" bodystart="20" bodyend="185"/>
    <listofallmembers>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a7c47def00c90db1987917e42a0860c05" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_blockWrapper</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1ab97c0714576b98ad45483fa36888d0d1" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_file</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a48782f4544a8209504e3ee3d2fdce548" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_fileNamePrefix</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1ad0e12fc59659878c779e2cfa0618a2d8" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_inputWait</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a268fdefcc43f6c2003d517284da5b99d" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_isOpened</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a78cb4558a0c90301879283cacb1d3fa7" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_loggerThread</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a463aa90bc106802183aa671d025d60e2" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_msgQueue</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1adc414f089e7397fc35069b7d8f756ef6" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_mutex</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1af44161661446460008728f7fec1cec83" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_output</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1aa4d4180025e2f0475924160466ba1558" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>_stop</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a4218db7fbf85c084939403a78fa4cf0b" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>BlockWrapper</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a7abb410460ffa8f18e790496e53d8de7" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>close</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a768d789db9c74012fcbbfecba6bdb02e" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>debug</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a8680624cb2a594bf724e44846d0c5465" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>error</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1af2bef7677032ede7b1af130b32e70883" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>FileLogger</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a9f93dc69e1b0e70fd26adb7a118c0c71" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>FileLogger</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a811e20feceb2bae48ce1c4cded0559e2" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>fileSync</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1aeb0e33cf890d60e61e4fb2276aef681d" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>genDateTimeFileName</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a027d30e79c1fca75712cb038374dbd94" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>getInstance</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a61a86e28c6c9e1017f6b04393df5fcaa" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>info</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a22c42988710aca29d8b9cc195175dd92" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>init</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a14f120266747db9a061678430601b4c3" prot="public" virt="virtual"><scope>Base::Logger::FileLogger</scope><name>log</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a65e23d4546f3918ae346cace6552212c" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>log</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1aa3344fc843cdce5df2476e426c580be1" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>logAndThrow</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1abd26fca4ab25c4c8f5d8ca90353a5882" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>open</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a26f5b1389cee9b5b10b8f09f2121d0fa" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>operator=</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1ad4b46a15dff84da2f76cc53617dcd087" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>run</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a3767a630a7504a4b701121cfabb86428" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>stop</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a1cc1b989023255d98f6c8d6ae4a09ad5" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>stringifyLogLvl</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a73569b0f30f60b810cd6cac758c162e8" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>threadID</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a743fe2a2861ba3c59f790bd2f0a2e9a3" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>timestamp</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1ac91f2a18964516183f2ead33bb7411cd" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>to_time_t</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1aa664e10474f1b49e2388e1eb07a0c755" prot="public" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>warning</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1acbe0d20de8f883b71047ecde06580e97" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>wrapValue</name></member>
      <member refid="class_base_1_1_logger_1_1_file_logger_1a07cf38e326acb545ce748de4132c58b5" prot="private" virt="non-virtual"><scope>Base::Logger::FileLogger</scope><name>~FileLogger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
