<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="_abstract_repository_manager_8hpp" kind="file" language="C++">
    <compoundname>AbstractRepositoryManager.hpp</compoundname>
    <includes local="no">any</includes>
    <includes local="no">atomic</includes>
    <includes local="no">functional</includes>
    <includes local="no">future</includes>
    <includes local="no">mutex</includes>
    <includes local="no">queue</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">tuple</includes>
    <includes refid="_abstract_repository_container_8hpp" local="yes">AbstractRepositoryContainer.hpp</includes>
    <includes refid="_repository_request_8hpp" local="yes">RepositoryRequest.hpp</includes>
    <includedby refid="_mock_repository_manager_8hpp" local="no">DataAccess/DataAccess.Mock/MockRepositoryManager.hpp</includedby>
    <includedby refid="_postgre_repository_manager_8hpp" local="no">DataAccess/DataAccess.Postgre/PostgreRepositoryManager.hpp</includedby>
    <incdepgraph>
      <node id="10">
        <label>AbstractRepositoryContainer.hpp</label>
        <link refid="_abstract_repository_container_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>DataAccess/Public/Include/DataAccess/AbstractRepositoryManager.hpp</label>
        <link refid="_abstract_repository_manager_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>FutureResult.hpp</label>
        <link refid="_future_result_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>IAdapter.hpp</label>
        <link refid="_i_adapter_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>IMasterRepository.hpp</label>
        <link refid="_i_master_repository_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>RepositoryRequest.hpp</label>
        <link refid="_repository_request_8hpp_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>any</label>
      </node>
      <node id="3">
        <label>atomic</label>
      </node>
      <node id="4">
        <label>functional</label>
      </node>
      <node id="5">
        <label>future</label>
      </node>
      <node id="21">
        <label>iostream</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
      <node id="6">
        <label>mutex</label>
      </node>
      <node id="18">
        <label>optional</label>
      </node>
      <node id="7">
        <label>queue</label>
      </node>
      <node id="13">
        <label>stdexcept</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="19">
        <label>string_view</label>
      </node>
      <node id="9">
        <label>tuple</label>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>typeinfo</label>
      </node>
      <node id="16">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>DataAccess/DataAccess.Mock/MockRepositoryManager.hpp</label>
        <link refid="_mock_repository_manager_8hpp_source"/>
      </node>
      <node id="3">
        <label>DataAccess/DataAccess.Postgre/PostgreRepositoryManager.hpp</label>
        <link refid="_postgre_repository_manager_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>DataAccess/Public/Include/DataAccess/AbstractRepositoryManager.hpp</label>
        <link refid="_abstract_repository_manager_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Server/Server.Core/Server.Core.Static/Server.hpp</label>
        <link refid="_server_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Server/Server.Core/Server.Core.Static/ServerBuilder.hpp</label>
        <link refid="_server_builder_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_data_access_1_1_i_repository_manager" prot="public">DataAccess::IRepositoryManager</innerclass>
    <innernamespace refid="namespace_data_access">DataAccess</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;any&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;future&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AbstractRepositoryContainer.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RepositoryRequest.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">DataAccess</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TIRepository,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TReturn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MethodReference<sp/>=<sp/>TReturn<sp/>(TIRepository::*)(TArgs...);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">std::conditional_t&lt;std::is_fundamental_v&lt;Type&gt;,<sp/>std::remove_reference_t&lt;Type&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;&gt;<sp/>fmt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>ref)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ref;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_data_access_1_1_i_repository_manager" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(std::unique_ptr&lt;AbstractRepositoryContainer&gt;<sp/>repositories)<sp/>{<sp/>_repositories<sp/>=<sp/>std::move(repositories);<sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_data_access_1_1_i_repository_manager_1ad02af3035b342cd4f1fad79c8fe46394" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_data_access_1_1_i_repository_manager_1ad02af3035b342cd4f1fad79c8fe46394" kindref="member">~IRepositoryManager</ref>()<sp/>{<sp/>_repositoryRequestsHandler.join();<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref>&amp;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref>(<ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref>&amp;<sp/>operator=(<ref refid="class_data_access_1_1_i_repository_manager" kindref="compound">IRepositoryManager</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ePriority<sp/>priority<sp/>=<sp/>ePriority::_15,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TIRepository,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TReturn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="63" refid="class_data_access_1_1_i_repository_manager_1a81bd2f415129a4a429f729701086250a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_data_access_1_1_future_result" kindref="compound">FutureResult&lt;TReturn&gt;</ref><sp/><ref refid="class_data_access_1_1_i_repository_manager_1a81bd2f415129a4a429f729701086250a" kindref="member">pushRequest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MethodReference&lt;TIRepository,<sp/>TReturn,<sp/>TArgs...&gt;&amp;<sp/>methodRef,<sp/>TArgs&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_base_of_v&lt;IMasterRepository,<sp/>TIRepository&gt;,<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>type<sp/>is<sp/>not<sp/>implement<sp/>IMasterRepository!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_polymorphic_v&lt;TIRepository&gt;<sp/>&amp;&amp;<sp/>std::is_abstract_v&lt;TIRepository&gt;,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>type<sp/>is<sp/>not<sp/>polymorphic<sp/>or<sp/>abstract!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_member_function_pointer_v&lt;MethodReference&lt;TIRepository,<sp/>TReturn,<sp/>TArgs...&gt;&gt;,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;You<sp/>passed<sp/>not<sp/>a<sp/>method<sp/>reference!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock<sp/>lock(_queueMutex);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_data_access_1_1_repository_request" kindref="compound">RepositoryRequest</ref><sp/><sp/><sp/><sp/><sp/>request<sp/>=<sp/>this-&gt;createRequest&lt;priority&gt;(methodRef,<sp/>std::forward&lt;TArgs&gt;(args)...);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_data_access_1_1_future_result" kindref="compound">FutureResult&lt;TReturn&gt;</ref><sp/>futureResult(request.<ref refid="struct_data_access_1_1_repository_request_1a06cdfdfa4595b2875b3a98c0096effd5" kindref="member">getFutureFromTask</ref>());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_queue.push(std::move(request));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_queueCV.notify_one();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>futureResult;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_data_access_1_1_i_repository_manager_1a3df2aa618b2b68efa9053cec7c7ec92b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_data_access_1_1_i_repository_manager_1a3df2aa618b2b68efa9053cec7c7ec92b" kindref="member">empty</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_queue.empty();<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>\todo:<sp/>Do<sp/>better<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Probably,<sp/>will<sp/>be<sp/>better<sp/>to<sp/>create<sp/>thread<sp/>pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>use<sp/>it<sp/>for<sp/>server<sp/>and<sp/>manager).</highlight></codeline>
<codeline lineno="94" refid="class_data_access_1_1_i_repository_manager_1ab81ebddb08e4dd5b00f6a1a03a1da90e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_access_1_1_i_repository_manager_1ab81ebddb08e4dd5b00f6a1a03a1da90e" kindref="member">handleRequests</ref>()</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_repositoryRequestsHandler<sp/>=<sp/>std::thread([</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(_handlerState)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>request<sp/>=<sp/>this-&gt;popRequest();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(request.has_value())<sp/>request.value()();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="class_data_access_1_1_i_repository_manager_1a38859f8067b2c360a17f52bd379b4768" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_access_1_1_i_repository_manager_1a38859f8067b2c360a17f52bd379b4768" kindref="member">stopHandler</ref>()</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_handlerState<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_queueCV.notify_one();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ePriority<sp/>priority,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TIRepository,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TReturn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_data_access_1_1_repository_request" kindref="compound">RepositoryRequest</ref><sp/>createRequest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MethodReference&lt;TIRepository,<sp/>TReturn,<sp/>TArgs...&gt;&amp;<sp/>methodRef,<sp/>TArgs&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iRepository<sp/>=<sp/>_repositories-&gt;getRepository&lt;TIRepository&gt;();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RequestTask<sp/>task([iRepository,<sp/>methodRef,<sp/>args<sp/>=<sp/>std::make_tuple(std::forward&lt;TArgs&gt;(args)...)]()<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>-&gt;<sp/>std::any<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::apply(methodRef,<sp/>std::tuple_cat(std::make_tuple(iRepository),<sp/>std::move(args)));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RepositoryRequest(priority,<sp/>task);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;RepositoryRequest&gt;<sp/>popRequest()<sp/>noexcept</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock<sp/>lock(_queueMutex);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_queueCV.wait(lock,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="class_data_access_1_1_i_repository_manager_1a3df2aa618b2b68efa9053cec7c7ec92b" kindref="member">empty</ref>()<sp/>||<sp/>!_handlerState;<sp/>});</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_handlerState<sp/>||<sp/><ref refid="class_data_access_1_1_i_repository_manager_1a3df2aa618b2b68efa9053cec7c7ec92b" kindref="member">empty</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RepositoryRequest<sp/>request<sp/>=<sp/>std::move(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">RepositoryRequest&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_queue.top()));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_queue.pop();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>request;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;AbstractRepositoryContainer&gt;<sp/>_repositories;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>std::priority_queue&lt;RepositoryRequest&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>_queue;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::mutex<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_queueMutex;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::condition_variable<sp/>_queueCV;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic&lt;bool&gt;<sp/>_handlerState<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/><sp/><sp/><sp/><sp/><sp/><sp/>_repositoryRequestsHandler;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>DataAccess</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="DataAccess/Public/Include/DataAccess/AbstractRepositoryManager.hpp"/>
  </compounddef>
</doxygen>
