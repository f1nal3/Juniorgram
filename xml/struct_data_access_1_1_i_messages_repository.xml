<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="struct_data_access_1_1_i_messages_repository" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>DataAccess::IMessagesRepository</compoundname>
    <basecompoundref refid="struct_data_access_1_1_i_master_repository" prot="public" virt="non-virtual">DataAccess::IMasterRepository</basecompoundref>
    <derivedcompoundref refid="struct_data_access_1_1_messages_repository" prot="public" virt="non-virtual">DataAccess::MessagesRepository</derivedcompoundref>
    <derivedcompoundref refid="struct_mock_object_1_1_mock_messages_repository" prot="public" virt="non-virtual">MockObject::MockMessagesRepository</derivedcompoundref>
    <includes refid="_i_server_repositories_8hpp" local="no">IServerRepositories.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_data_access_1_1_i_messages_repository_1a6082364cbb8ff63a96b43468ec650676" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; <ref refid="struct_models_1_1_message_info" kindref="compound">Models::MessageInfo</ref> &gt;</type>
        <definition>virtual std::vector&lt; Models::MessageInfo &gt; DataAccess::IMessagesRepository::getMessageHistory</definition>
        <argsstring>(const std::uint64_t channelID)=0</argsstring>
        <name>getMessageHistory</name>
        <qualifiedname>DataAccess::IMessagesRepository::getMessageHistory</qualifiedname>
        <reimplementedby refid="struct_data_access_1_1_messages_repository_1a758b43576469ae4f54abc034a655e2b0">getMessageHistory</reimplementedby>
        <param>
          <type>const std::uint64_t</type>
          <declname>channelID</declname>
        </param>
        <briefdescription>
<para>Virtual method for getting history. /. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channelID</parametername>
</parameternamelist>
<parameterdescription>
<para>- channel&apos;s id from which we want to get message history. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of messages as vector of MessageInfo. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataAccess/Public/Include/DataAccess/IServerRepositories.hpp" line="30" column="25"/>
      </memberdef>
      <memberdef kind="function" id="struct_data_access_1_1_i_messages_repository_1a095da3f629d3af9e728ad934e3591c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Utility::StoringMessageCodes</type>
        <definition>virtual Utility::StoringMessageCodes DataAccess::IMessagesRepository::storeMessage</definition>
        <argsstring>(const Models::MessageInfo &amp;messageInfo)=0</argsstring>
        <name>storeMessage</name>
        <qualifiedname>DataAccess::IMessagesRepository::storeMessage</qualifiedname>
        <reimplementedby refid="struct_mock_object_1_1_mock_messages_repository_1ac3e87a410abab5f8984201d0fc34ee3f">storeMessage</reimplementedby>
        <reimplementedby refid="struct_data_access_1_1_messages_repository_1a8e02ece233133f7f90b7f2956f2e24e4">storeMessage</reimplementedby>
        <param>
          <type>const <ref refid="struct_models_1_1_message_info" kindref="compound">Models::MessageInfo</ref> &amp;</type>
          <declname>messageInfo</declname>
        </param>
        <briefdescription>
<para>Virtual method for storing message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Network::MessageInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>which contains message&apos;s data for storing in repository. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value of the method is one of the StoringMessageCodes (enum): <linebreak/>
Storing successful - StoringMessageCodes::SUCCESS. <linebreak/>
Storing failed - StoringMessageCodes::FAILED. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataAccess/Public/Include/DataAccess/IServerRepositories.hpp" line="39" column="42"/>
      </memberdef>
      <memberdef kind="function" id="struct_data_access_1_1_i_messages_repository_1a12b91f71dc1e67559dfe2f3c3dab9825" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Utility::DeletingMessageCodes</type>
        <definition>virtual Utility::DeletingMessageCodes DataAccess::IMessagesRepository::deleteMessage</definition>
        <argsstring>(const Models::MessageInfo &amp;messageInfo)=0</argsstring>
        <name>deleteMessage</name>
        <qualifiedname>DataAccess::IMessagesRepository::deleteMessage</qualifiedname>
        <reimplementedby refid="struct_mock_object_1_1_mock_messages_repository_1ae198ce3cf5b1714b6c854a4e97259672">deleteMessage</reimplementedby>
        <reimplementedby refid="struct_data_access_1_1_messages_repository_1a33db313fa44b25588fb01549b3339247">deleteMessage</reimplementedby>
        <param>
          <type>const <ref refid="struct_models_1_1_message_info" kindref="compound">Models::MessageInfo</ref> &amp;</type>
          <declname>messageInfo</declname>
        </param>
        <briefdescription>
<para>Virtual method for deleting message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>messageInfo.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value of the method is one of the StoringMessageCodes (enum): <linebreak/>
Deleting successful - StoringMessageCodes::SUCCESS. <linebreak/>
Deleting failed - StoringMessageCodes::FAILED. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataAccess/Public/Include/DataAccess/IServerRepositories.hpp" line="48" column="43"/>
      </memberdef>
      <memberdef kind="function" id="struct_data_access_1_1_i_messages_repository_1a7fc72c43885c8bd1daa662f039125234" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Utility::EditingMessageCodes</type>
        <definition>virtual Utility::EditingMessageCodes DataAccess::IMessagesRepository::editMessage</definition>
        <argsstring>(const Models::MessageInfo &amp;messageInfo)=0</argsstring>
        <name>editMessage</name>
        <qualifiedname>DataAccess::IMessagesRepository::editMessage</qualifiedname>
        <reimplementedby refid="struct_mock_object_1_1_mock_messages_repository_1a37b4dd65675894f6e3b8d8fd2186957c">editMessage</reimplementedby>
        <reimplementedby refid="struct_data_access_1_1_messages_repository_1a8f4861e1f2a3630e830bbc2bc4357fc1">editMessage</reimplementedby>
        <param>
          <type>const <ref refid="struct_models_1_1_message_info" kindref="compound">Models::MessageInfo</ref> &amp;</type>
          <declname>messageInfo</declname>
        </param>
        <briefdescription>
<para>Virtual method for editing message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>emi</parametername>
</parameternamelist>
<parameterdescription>
<para>as MessageInfo which contains message&apos;s data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value of the method is one of the StoringMessageCodes (enum): <linebreak/>
Editing successful - StoringMessageCodes::SUCCESS. <linebreak/>
Editing failed - StoringMessageCodes::FAILED. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataAccess/Public/Include/DataAccess/IServerRepositories.hpp" line="57" column="42"/>
      </memberdef>
      <memberdef kind="function" id="struct_data_access_1_1_i_messages_repository_1a36ed0a5d818ff5d7887402587cc72502" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Utility::ReactionMessageCodes</type>
        <definition>virtual Utility::ReactionMessageCodes DataAccess::IMessagesRepository::updateMessageReactions</definition>
        <argsstring>(const Models::MessageInfo &amp;messageInfo)=0</argsstring>
        <name>updateMessageReactions</name>
        <qualifiedname>DataAccess::IMessagesRepository::updateMessageReactions</qualifiedname>
        <reimplementedby refid="struct_mock_object_1_1_mock_messages_repository_1af2619ce7822ceaf28fbce94ec523eb60">updateMessageReactions</reimplementedby>
        <reimplementedby refid="struct_data_access_1_1_messages_repository_1a8f9bcce576a67b87149123742dc053bb">updateMessageReactions</reimplementedby>
        <param>
          <type>const <ref refid="struct_models_1_1_message_info" kindref="compound">Models::MessageInfo</ref> &amp;</type>
          <declname>messageInfo</declname>
        </param>
        <briefdescription>
<para>Virtual method for updating message reactions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Network::MessageInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>which contains message&apos;s reaction map(id, count) with changed reaction count set to uint32_t max </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value of the method is one of the ReactionMessageCodes (enum): <linebreak/>
Update successful - ReactionMessageCodes::SUCCESS. <linebreak/>
Update failed - ReactionMessageCodes::FAILED. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataAccess/Public/Include/DataAccess/IServerRepositories.hpp" line="66" column="43"/>
      </memberdef>
      <memberdef kind="function" id="struct_data_access_1_1_i_messages_repository_1a18bdd2e309cb9d005b339706a7af6b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual DataAccess::IMessagesRepository::~IMessagesRepository</definition>
        <argsstring>()=default</argsstring>
        <name>~IMessagesRepository</name>
        <qualifiedname>DataAccess::IMessagesRepository::~IMessagesRepository</qualifiedname>
        <briefdescription>
<para>virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataAccess/Public/Include/DataAccess/IServerRepositories.hpp" line="71" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements message processing on server side. </para>
    </briefdescription>
    <detaileddescription>
<para>The class specify, which information it process. It include methods for working with messages from database (e.g. adding, deleting, editing, getting messages). <linebreak/>
Message - is an object of MessageInfo class. As least it contains the sender and semantic message. <linebreak/>
The class used as base of implementation message processing for each type of database. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>DataAccess::IMasterRepository</label>
        <link refid="struct_data_access_1_1_i_master_repository"/>
      </node>
      <node id="1">
        <label>DataAccess::IMessagesRepository</label>
        <link refid="struct_data_access_1_1_i_messages_repository"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>DataAccess::MessagesRepository</label>
        <link refid="struct_data_access_1_1_messages_repository"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>MockObject::MockMessagesRepository</label>
        <link refid="struct_mock_object_1_1_mock_messages_repository"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>DataAccess::IMasterRepository</label>
        <link refid="struct_data_access_1_1_i_master_repository"/>
      </node>
      <node id="1">
        <label>DataAccess::IMessagesRepository</label>
        <link refid="struct_data_access_1_1_i_messages_repository"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="DataAccess/Public/Include/DataAccess/IServerRepositories.hpp" line="23" column="1" bodyfile="DataAccess/Public/Include/DataAccess/IServerRepositories.hpp" bodystart="24" bodyend="72"/>
    <listofallmembers>
      <member refid="struct_data_access_1_1_i_messages_repository_1a12b91f71dc1e67559dfe2f3c3dab9825" prot="public" virt="pure-virtual"><scope>DataAccess::IMessagesRepository</scope><name>deleteMessage</name></member>
      <member refid="struct_data_access_1_1_i_messages_repository_1a7fc72c43885c8bd1daa662f039125234" prot="public" virt="pure-virtual"><scope>DataAccess::IMessagesRepository</scope><name>editMessage</name></member>
      <member refid="struct_data_access_1_1_i_messages_repository_1a6082364cbb8ff63a96b43468ec650676" prot="public" virt="pure-virtual"><scope>DataAccess::IMessagesRepository</scope><name>getMessageHistory</name></member>
      <member refid="struct_data_access_1_1_i_messages_repository_1a095da3f629d3af9e728ad934e3591c62" prot="public" virt="pure-virtual"><scope>DataAccess::IMessagesRepository</scope><name>storeMessage</name></member>
      <member refid="struct_data_access_1_1_i_messages_repository_1a36ed0a5d818ff5d7887402587cc72502" prot="public" virt="pure-virtual"><scope>DataAccess::IMessagesRepository</scope><name>updateMessageReactions</name></member>
      <member refid="struct_data_access_1_1_i_master_repository_1a7f04b7df7482816d4de0c504f432fb5f" prot="public" virt="virtual"><scope>DataAccess::IMessagesRepository</scope><name>~IMasterRepository</name></member>
      <member refid="struct_data_access_1_1_i_messages_repository_1a18bdd2e309cb9d005b339706a7af6b8f" prot="public" virt="virtual"><scope>DataAccess::IMessagesRepository</scope><name>~IMessagesRepository</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
