name: GCC Linux Build

on:
  push:
    branches: [ dev, master ]
  pull_request:
    branches: [ dev, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        BUILD_TYPE: [Debug, Release] 
  
    services:
      postgres:
        image: postgres
        env:
           POSTGRES_USER: postgres
           POSTGRES_PASSWORD: postgres
           POSTGRES_DB: testdb
           POSTGRES_HOST_AUTH_METHOD: trust
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install dependencies
      run: sudo apt-get install libgl-dev libx11-xcb-dev apt-file libfontenc-dev libxaw7-dev
      
    - name: Python setup
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        architecture: 'x64'
        
    - name: Get prerequisites
      run: python -m pip install conan==1.45 cmake

    - name: Cache Conan packages
      id: conan-cache
      uses: actions/cache@v2
      with:
        path: '/home/runner/.conan/*'
        key: ${{ runner.os }}${{matrix.BUILD_TYPE}}-conan
        restore-keys: ${{ runner.os }}${{matrix.BUILD_TYPE}}-conan
      
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.BUILD_TYPE}}
      
    - name: Prepare Database
      run: psql --username=postgres --host=localhost -d testdb -f ./Utility/SQL/Database_Scheme.sql

    - name: Test
      working-directory: ${{github.workspace}}/build  
      run: ctest -C ${{matrix.BUILD_TYPE}} --output-on-failure
   
    - name: Archive server executable
      if: matrix.BUILD_TYPE == 'Release' && github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v2
      with:
        name: juniorgram-server
        path: ./build/bin/Server.Exec
        
    - name: Setup SSH
      if: matrix.BUILD_TYPE == 'Release' && github.event_name == 'push' && github.ref == 'refs/heads/dev'
      run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host jg_host
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
      env:
          SSH_USER: ${{ secrets.HOST_USER }}
          SSH_KEY: ${{ secrets.HOST_SSH_KEY }}
          SSH_HOST: ${{ secrets.HOST_IP_ADDRESS }}
          
    - name: Stop JG Service
      if: matrix.BUILD_TYPE == 'Release' && github.event_name == 'push' && github.ref == 'refs/heads/dev'
      run: |
          ssh jg_host 'sudo systemctl stop juniorgram.test.service '
          ssh jg_host 'sudo rm juniorgram.test' 
    
    - name: Upload server to Host
      if: matrix.BUILD_TYPE == 'Release' && github.event_name == 'push' && github.ref == 'refs/heads/dev'    
      run: scp ./build/bin/Server.Exec jg_host:/home/jg_admin/juniorgram.test
        
    - name: Start JG Service
      if: matrix.BUILD_TYPE == 'Release' && github.event_name == 'push' && github.ref == 'refs/heads/dev'
      run: |
          ssh jg_host 'sudo chmod +x juniorgram.test'
          ssh jg_host 'sudo systemctl start juniorgram.test.service'
